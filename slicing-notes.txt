Tasks:
 -- finding nearest dominator.  This implies you need some order on nodes


Computing dominator tree.

Start with tree given by dom relation

a -> b1 ... bn


now start with b1
  if let S be the set of notes b2 .. bn that b1 dominates b2



now say the nearest inverse dominator of m of d

 find all nodes that are on the paths from m to d not including




------------
Clearly the root node is in the dominator-tree.


;; Algorithm for finding control-dependence info
;;   Taken from Andersen:PhD which in turn is taken from Ferrante
;;
;; Given the hammock graph G = (S,E,s,e)
;;
;; 1. construct the inverse-dominator tree (post-dominator tree) T for G
;; 2. Define E' = {<m,n> in E | n is not an ancestor of m in T}
;;       that is n does not post dominate m 
;; 3. For all <m,n> in E', traverse T backwards from n to m's parent
;;    node and mark all nodes n' as control dependent on m
;;

Control Dependence: Node n is control-dependent on m if
  i) there exists a non-trivial path pi from m to n such that
  every node m' in pi \ {m,n} is post-dominated by n, and
  ii) m is not post-dominated by n

** note: that definition can easily be written as a CTL formula(?)



Hence, for a node n to be control dependent on m,
   m must have at least two exit edges,
   there must be two paths from m to end node e
     and n is on one path but not the other, and there
   are no branches on the path from m to n (this is not true,
   there can be branches, but both branches have to lead
   back into n -- if node p is branching, the definition
   tells us the p must be post-dominated by ).

Task: Construct a function that maps each node to the set
of nodes on which it is control dependent.

Ideas:
  for node n,
    - search backward on all paths leading into n until
       (a) a conditional node m (or branching node) that is not 
              post-dominated by n is found 
                (in this case n is control dependent on m).
       (b) the initial node m is found and it does not
           satisfy (a)
                (no control dependencies are reported)
       (c) a node m is found that has already been visited




